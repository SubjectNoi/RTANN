#pragma once
#ifndef JUNO_CORE_H_
#define JUNO_CORE_H_

#include "utils.hpp"
#include "juno_rt.hpp"
#include "juno_query.hpp"
namespace juno {

template <typename T>
class juno_core {
private:
    std::string dataset_dir;

    // dataset property
    int         N;
    int         M;
    int         D;
    int         Q;
    int         PQ_entry;
    METRIC      metric;

    // juno impl property
    bool        use_pq;
    int         coarse_grained_cluster_num;
    RT_MODE     rt_mode;   

    // data
    T**         search_points;
    T*          search_points_flatten;
    T**         cluster_centroids;
    T*          cluster_centroids_flatten;
    std::vector<std::pair<int, std::vector <T>>> cluster_centroids_vec;
    T*          square_C;               // [ Offline]: coarse_grained_cluster_num * D
    T*          square_Q;               // [  Online]: query_batch_size * D
    int*        search_points_labels;
    int**       ground_truth;
    int*        ground_truth_flatten;
    int*        cluster_size;
    T           radius;
    T**         stat;
    T****       codebook_entry;         // [C][D/M][E][M]
    int***      codebook_labels;        // [C][D/M][]
    std::vector<int>*** inversed_codebook_map; // [C][D/M][32][]
    // std::vector<int>*** inversed_codebook_map_localid;
    uint8_t*    hit_res;
    int*        sub_cluster_size;       // [C * D/M * 32]
    
    std::map<int, std::vector<int>> points_cluster_mapping;

    // BVH dict
    std::map<int, juno_rt<T>*> bvh_dict;
    CUstream    stream;
    float factors[64] = {226.91, 226.292, 234.105, 245.577, 279.63, 236.516, 231.948, 269.431, 274.614, 244.002, 235.553, 258.38, 243.939, 237.857, 229.811, 229.819, 244.322, 226.982, 252.21, 246.903, 265.966, 238.008, 231.935, 249.658, 278.304, 241.357, 236.966, 259.187, 245.247, 245.449, 244.663, 229.863, 238.673, 245.904, 235.468, 238.296, 266.595, 246.564, 229.863, 245.392, 275.224, 245.247, 239.019, 254.136, 239.708, 236.212, 248.244, 244.125, 237.346, 247.491, 225.754, 225.657, 276.957, 235.85, 229.142, 265.548, 285.272, 237.186, 252.723, 263.139, 240.983, 220.048, 237.626, 236.326};
    // int nl32[] = {};
    // std::vector<int> nl16 = {2, 7, 8, 10, 28, 30, 32, 33, 51, 52, 63, 68, 71, 81, 88, 98, 102, 109, 124, 132, 148, 150, 155, 158, 165, 169, 181, 184, 190, 193, 197, 207, 211, 214, 218, 225, 226, 230, 249, 254, 264, 272, 284, 320, 321, 323, 324, 357, 359, 386, 413, 418, 423, 432, 434, 443, 444, 446, 452, 454, 457, 461, 469, 472, 475, 476, 480, 484, 485, 486, 490, 497, 501, 515, 524, 536, 537, 539, 552, 558, 576, 580, 592, 599, 600, 602, 614, 617, 627, 640, 642, 650, 651, 653, 657, 661, 666, 667, 679, 681, 708, 709, 713, 727, 741, 769, 779, 799, 800, 803, 812, 821, 837, 841, 861, 881, 898, 899, 900, 901, 902, 914, 916, 930, 947, 948, 966, 995, 1011, 1012, 1029, 1034, 1042, 1044, 1045, 1050, 1061, 1063, 1078, 1093, 1105, 1107, 1119, 1131, 1142, 1146, 1154, 1162, 1163, 1165, 1168, 1169, 1172, 1174, 1184, 1186, 1188, 1196, 1250, 1274, 1292, 1340, 1350, 1362, 1381, 1388, 1408, 1414, 1421, 1431, 1440, 1449, 1458, 1462, 1465, 1468, 1469, 1474, 1478, 1485, 1488, 1491, 1507, 1510, 1514, 1520, 1530, 1533, 1537, 1539, 1543, 1544, 1548, 1552, 1555, 1556, 1557, 1558, 1569, 1571, 1574, 1594, 1598, 1600, 1602, 1607, 1611, 1614, 1616, 1617, 1620, 1623, 1626, 1627, 1631, 1633, 1634, 1646, 1653, 1663, 1664, 1668, 1669, 1676, 1677, 1683, 1692, 1693, 1694, 1696, 1697, 1701, 1702, 1705, 1708, 1709, 1710, 1711, 1716, 1725, 1729, 1742, 1746, 1748, 1751, 1756, 1758, 1761, 1763, 1764, 1767, 1768, 1770, 1773, 1776, 1778, 1779, 1781, 1782, 1783, 1785, 1792, 1794, 1796, 1805, 1856, 1873, 1966, 1970, 1978, 2010, 2015, 2027, 2032, 2078, 2079, 2080, 2083, 2110, 2135, 2148, 2150, 2206, 2211, 2215, 2241, 2243, 2248, 2263, 2275, 2277, 2287, 2304, 2308, 2318, 2324, 2343, 2352, 2357, 2361, 2367, 2370, 2371, 2381, 2390, 2392, 2396, 2397, 2400, 2403, 2422, 2423, 2425, 2430, 2431, 2432, 2448, 2449, 2451, 2458, 2460, 2461, 2464, 2465, 2470, 2471, 2487, 2488, 2489, 2493, 2500, 2504, 2516, 2525, 2526, 2527, 2534, 2537, 2561, 2562, 2569, 2573, 2584, 2586, 2596, 2601, 2608, 2612, 2617, 2618, 2619, 2620, 2621, 2624, 2626, 2632, 2634, 2636, 2640, 2642, 2644, 2645, 2649, 2650, 2651, 2654, 2658, 2661, 2662, 2664, 2673, 2674, 2675, 2676, 2678, 2683, 2684, 2686, 2688, 2689, 2693, 2697, 2699, 2701, 2703, 2704, 2705, 2707, 2715, 2717, 2719, 2721, 2722, 2723, 2725, 2727, 2728, 2729, 2734, 2735, 2739, 2740, 2741, 2744, 2745, 2748, 2750, 2751, 2753, 2764, 2774, 2777, 2779, 2788, 2789, 2790, 2798, 2825, 2830, 2835, 2839, 2842, 2870, 2884, 2887, 2895, 2902, 2915, 2944, 2949, 2966, 2969, 2970, 2985, 2994, 2996, 2997, 2998, 3037, 3039, 3074, 3079, 3083, 3103, 3106, 3107, 3188, 3192, 3193, 3195, 3197, 3200, 3206, 3210, 3217, 3218, 3221, 3225, 3230, 3234, 3239, 3244, 3246, 3247, 3254, 3256, 3262, 3265, 3267, 3271, 3274, 3293, 3297, 3312, 3315, 3324, 3325, 3327, 3332, 3338, 3340, 3348, 3351, 3356, 3364, 3365, 3372, 3376, 3379, 3380, 3387, 3392, 3393, 3397, 3418, 3436, 3458, 3464, 3469, 3477, 3487, 3515, 3569, 3572, 3584, 3585, 3595, 3601, 3608, 3613, 3615, 3620, 3622, 3626, 3627, 3629, 3633, 3638, 3641, 3642, 3643, 3644, 3647, 3650, 3652, 3671, 3680, 3683, 3685, 3693, 3698, 3703, 3704, 3706, 3711, 3718, 3721, 3724, 3725, 3731, 3732, 3737, 3740, 3743, 3745, 3750, 3752, 3755, 3757, 3758, 3764, 3766, 3767, 3770, 3777, 3790, 3791, 3796, 3800, 3806, 3813, 3822, 3823, 3833, 3854, 3858, 3861, 3862, 3876, 3877, 3881, 3896, 3904, 3906, 3911, 3927, 3931, 3934, 3937, 3948, 3970, 3985, 3991, 4010, 4092, 4112, 4168, 4182, 4221, 4240, 4245, 4263, 4273, 4275, 4278, 4280, 4288, 4291, 4298, 4308, 4317, 4332, 4335, 4352, 4354, 4357, 4361, 4362, 4364, 4376, 4384, 4407, 4408, 4417, 4422, 4426, 4435, 4442, 4443, 4450, 4457, 4462, 4463, 4472, 4473, 4476, 4477, 4478, 4482, 4485, 4489, 4493, 4494, 4496, 4498, 4503, 4511, 4512, 4518, 4521, 4524, 4528, 4529, 4532, 4535, 4543, 4547, 4548, 4549, 4550, 4552, 4553, 4558, 4560, 4564, 4566, 4570, 4574, 4579, 4588, 4590, 4594, 4637, 4640, 4649, 4652, 4663, 4701, 4705, 4708, 4712, 4730, 4731, 4767, 4786, 4796, 4802, 4805, 4808, 4818, 4820, 4824, 4825, 4827, 4831, 4834, 4838, 4840, 4847, 4851, 4856, 4859, 4867, 4868, 4869, 4874, 4877, 4878, 4880, 4882, 4885, 4888, 4891, 4893, 4899, 4900, 4901, 4906, 4912, 4914, 4917, 4920, 4929, 4930, 4933, 4936, 4940, 4941, 4942, 4943, 4951, 4958, 4964, 4966, 4970, 4971, 4977, 4988, 4991, 4992, 4993, 5013, 5027, 5038, 5048, 5101, 5109, 5140, 5148, 5163, 5188, 5191, 5202, 5219, 5231, 5237, 5245, 5249, 5251, 5256, 5271, 5281, 5283, 5288, 5290, 5292, 5296, 5297, 5299, 5305, 5312, 5320, 5323, 5325, 5327, 5336, 5338, 5347, 5348, 5351, 5358, 5366, 5370, 5380, 5392, 5401, 5406, 5410, 5413, 5419, 5420, 5421, 5431, 5432, 5438, 5441, 5448, 5455, 5460, 5465, 5471, 5473, 5474, 5477, 5480, 5481, 5497, 5506, 5507, 5509, 5510, 5511, 5514, 5518, 5519, 5525, 5527, 5528, 5537, 5540, 5543, 5544, 5546, 5551, 5552, 5555, 5556, 5562, 5564, 5569, 5570, 5571, 5573, 5577, 5578, 5579, 5581, 5618, 5631, 5659, 5662, 5670, 5671, 5674, 5684, 5686, 5702, 5704, 5707, 5727, 5735, 5738, 5742, 5753, 5769, 5771, 5778, 5787, 5790, 5802, 5813, 5833, 5846, 5872, 5880, 5883, 5897, 5905, 5911, 5913, 5928, 5936, 5975, 5978, 5982, 5988, 6026, 6033, 6049, 6053, 6057, 6066, 6077, 6089, 6095, 6102, 6104, 6125, 6143, 6150, 6155, 6163, 6174, 6175, 6181, 6188, 6195, 6223, 6224, 6225, 6239, 6248, 6268, 6273, 6277, 6279, 6280, 6283, 6302, 6304, 6305, 6306, 6307, 6310, 6327, 6331, 6337, 6339, 6357, 6358, 6362, 6373, 6376, 6384, 6388, 6393, 6397, 6398, 6401, 6415, 6416, 6417, 6423, 6437, 6445, 6462, 6466, 6467, 6485, 6493, 6512, 6523, 6533, 6545, 6553, 6557, 6570, 6594, 6595, 6598, 6602, 6603, 6605, 6613, 6618, 6626, 6638, 6641, 6653, 6654, 6664, 6669, 6676, 6717, 6726, 6737, 6744, 6776, 6780, 6810, 6822, 6831, 6832, 6835, 6841, 6863, 6870, 6871, 6876, 6881, 6885, 6897, 6901, 6903, 6905, 6913, 6915, 6917, 6921, 6929, 6933, 6934, 6944, 6950, 6953, 6956, 6957, 6959, 6962, 6980, 6981, 6985, 6987, 6993, 6995, 6999, 7005, 7027, 7038, 7057, 7062, 7070, 7073, 7083, 7089, 7098, 7100, 7107, 7123, 7127, 7129, 7138, 7158, 7159, 7162, 7165, 7167, 7176, 7181, 7187, 7190, 7191, 7199, 7209, 7211, 7217, 7218, 7226, 7229, 7232, 7236, 7237, 7238, 7247, 7250, 7252, 7253, 7263, 7275, 7285, 7286, 7301, 7309, 7317, 7337, 7344, 7353, 7365, 7372, 7376, 7381, 7389, 7394, 7399, 7405, 7411, 7436, 7460, 7477, 7490, 7518, 7522, 7526, 7534, 7535, 7576, 7593, 7594, 7600, 7604, 7605, 7606, 7607, 7619, 7621, 7623, 7628, 7629, 7639, 7648, 7655, 7656, 7659, 7672, 7673, 7682, 7683, 7716, 7717, 7738, 7769, 7776, 7783, 7786, 7788, 7793, 7794, 7795, 7799, 7802, 7817, 7822, 7826, 7828, 7833, 7837, 7839, 7850, 7860, 7882, 7889, 7893, 7901, 7904, 7922, 7923, 7928, 7931, 7942, 7944, 7953, 7956, 7960, 7970, 7994, 8003, 8008, 8016, 8018, 8024, 8028, 8032, 8044, 8057, 8058, 8059, 8062, 8067, 8071, 8072, 8074, 8077, 8079, 8080, 8081, 8082, 8084, 8090, 8091, 8095, 8098, 8101, 8111, 8116, 8119, 8124, 8129, 8131, 8132, 8139, 8140, 8144, 8146, 8149, 8153, 8154, 8156, 8159, 8160, 8161, 8163, 8165, 8167, 8168, 8170, 8181, 8183, 8185, 8191, 8192, 8194, 8196, 8199, 8203, 8204, 8205, 8206, 8207, 8208, 8212, 8213, 8214, 8216, 8217, 8225, 8231, 8236, 8259, 8262, 8266, 8269, 8273, 8275, 8280, 8284, 8287, 8295, 8300, 8302, 8313, 8314, 8316, 8322, 8324, 8326, 8328, 8332, 8335, 8336, 8340, 8343, 8346, 8352, 8359, 8367, 8368, 8370, 8374, 8395, 8397, 8399, 8424, 8438, 8439, 8454, 8458, 8474, 8486, 8498, 8510, 8530, 8532, 8533, 8537, 8542, 8544, 8552, 8567, 8569, 8571, 8595, 8600, 8605, 8608, 8613, 8614, 8617, 8618, 8619, 8621, 8624, 8625, 8634, 8635, 8637, 8638, 8643, 8658, 8661, 8664, 8671, 8677, 8681, 8686, 8693, 8694, 8703, 8704, 8710, 8714, 8719, 8721, 8722, 8723, 8730, 8738, 8740, 8741, 8743, 8746, 8748, 8754, 8755, 8758, 8759, 8760, 8765, 8767, 8770, 8771, 8773, 8777, 8780, 8790, 8791, 8796, 8797, 8798, 8823, 8828, 8829, 8831, 8845, 8850, 8866, 8937, 9003, 9005, 9006, 9008, 9010, 9018, 9041, 9048, 9052, 9067, 9093, 9095, 9100, 9123, 9132, 9135, 9138, 9141, 9157, 9158, 9159, 9169, 9184, 9192, 9203, 9206, 9208, 9209, 9211, 9234, 9240, 9242, 9254, 9258, 9268, 9270, 9274, 9282, 9283, 9286, 9293, 9296, 9297, 9300, 9305, 9323, 9324, 9328, 9339, 9344, 9359, 9363, 9369, 9371, 9373, 9376, 9383, 9384, 9386, 9392, 9395, 9396, 9400, 9410, 9411, 9412, 9414, 9417, 9428, 9461, 9462, 9489, 9512, 9513, 9519, 9522, 9524, 9554, 9597, 9628, 9630, 9640, 9641, 9672, 9687, 9695, 9697, 9704, 9732, 9735, 9741, 9755, 9784, 9787, 9788, 9806, 9809, 9840, 9845, 9850, 9858, 9864, 9867, 9870, 9871, 9875, 9883, 9886, 9887, 9891, 9893, 9908, 9910, 9912, 9913, 9926, 9928, 9942, 9944, 9950, 9951, 9956, 9963, 9969, 9978, 9984, 9987, 9991, 9993, 9995, 9999};
    // std::vector<int> nl32 = {2, 8, 28, 32, 33, 42, 52, 56, 68, 78, 88, 89, 102, 111, 114, 115, 132, 139, 150, 154, 155, 158, 159, 166, 174, 184, 193, 202, 207, 253, 307, 311, 324, 359, 387, 393, 396, 426, 509, 552, 583, 641, 803, 812, 827, 832, 837, 842, 848, 861, 881, 896, 898, 899, 902, 913, 914, 930, 947, 959, 962, 972, 991, 995, 1021, 1040, 1044, 1066, 1068, 1073, 1111, 1142, 1188, 1362, 1403, 1408, 1444, 1458, 1470, 1485, 1491, 1548, 1568, 1571, 1574, 1655, 1798, 2403, 2410, 2422, 2430, 2448, 2461, 2462, 2471, 2487, 2489, 2494, 2497, 2498, 2517, 2525, 2539, 2544, 2547, 2548, 2561, 2569, 2573, 2574, 2584, 2586, 2601, 2609, 2611, 2616, 2618, 2619, 2624, 2630, 2632, 2634, 2639, 2640, 2642, 2651, 2654, 2658, 2661, 2662, 2664, 2673, 2674, 2676, 2678, 2681, 2683, 2684, 2689, 2697, 2699, 2701, 2704, 2705, 2706, 2707, 2710, 2711, 2728, 2729, 2733, 2734, 2739, 2740, 2744, 2745, 2751, 2754, 2756, 2758, 2759, 2772, 2776, 2779, 2784, 2787, 2789, 2790, 2795, 2798, 2810, 2835, 2994, 3458, 3487, 3569, 3800, 3822, 3852, 3854, 3862, 4191, 4417, 4435, 4443, 4447, 4451, 4456, 4464, 4466, 4473, 4484, 4485, 4543, 4549, 4552, 4560, 4564, 4566, 4570, 4571, 4579, 4590, 4594, 4836, 4945, 5350, 5355, 5438, 5510, 5630, 5686, 5717, 5742, 5778, 5790, 6004, 6017, 6066, 6089, 6095, 6298, 6314, 6433, 6833, 7027, 7032, 7054, 7070, 7083, 7089, 7098, 7107, 7113, 7129, 7162, 7165, 7190, 7204, 7208, 7215, 7217, 7224, 7236, 7237, 7247, 7250, 7253, 7258, 7263, 7269, 7275, 7285, 7286, 7300, 7301, 7315, 7327, 7376, 7411, 7414, 7477, 7607, 8016, 8023, 8044, 8080, 8101, 8149, 8201, 8215, 8501, 8510, 8567, 8579, 8605, 8617, 8625, 8648, 8664, 8736, 8744, 8755, 8757, 8780, 8797, 8828, 8829, 8831, 8924, 9062, 9138, 9212, 9234, 9240, 9265, 9280, 9282, 9301, 9311, 9388, 9697, 9736};
    // unsigned int* hit_record;
    unsigned long long* hit_record;
public:
    juno_core(std::string _dataset_dir, 
              DATASET ds=CUSTOM, 
              int _coarse_grained_cluster_num=1000, 
              T _radius=0.3,
              bool _use_pq=true, 
              RT_MODE _rt_mode=QUERY_AS_RAY
             ) 
    {
        // omp_set_num_threads(64);
        M = 2;
        CUDA_CHECK(cudaStreamCreate(&stream));
        dataset_dir = _dataset_dir;
        radius = _radius;
        switch (ds) {
            case SIFT1M:
                N = 1000000;
                D = 128;
                Q = 10000;
                PQ_entry = 32;
                metric = METRIC_L2;
                break;
            case SIFT1B:
                N = 100000000;
                D = 128;
                Q = 10;
                PQ_entry = 512;
                metric = METRIC_L2;
                break;
            case TTI1M:

                break;
            case TTI1B:

                break;
            case DEEP1M:
                N = 1000000;
                D = 96;
                Q = 10000;
                PQ_entry = 32;
                metric = METRIC_L2;
                break;
            case CUSTOM:
                N = 16;
                D = 4;
                Q = 1;
                PQ_entry = 4;
                metric = METRIC_L2;
                break;
            default:

                break;
        }
        use_pq = _use_pq;
        coarse_grained_cluster_num = _coarse_grained_cluster_num;
        rt_mode = _rt_mode;
        hit_record = new unsigned long long[QUERY_BATCH_MAX * NLISTS_MAX * (D / M) * (MAX_ENTRY / 32)];
        CUDA_CHECK(cudaMalloc(reinterpret_cast<void**>(&hit_res), sizeof(uint8_t) * Q * N));
        sub_cluster_size = new int[coarse_grained_cluster_num * (D / M) * PQ_entry];
        // printf("Reading Search Points...");
        // search_points = new T* [N];
        // search_points_flatten = new T[N * D];
        // for (int i = 0; i < N; i++) search_points[i] = new T[D];
        // read_search_points<T>((dataset_dir + "search_points").c_str(), search_points, N, D);
        // for (int n = 0; n < N; n++) {
        //     for (int d = 0; d < D; d++) {
        //         search_points_flatten[n * D + d] = search_points[n][d];
        //     }
        // }
        // printf("Finished\n");
        search_points = NULL;
        printf("Reading Cluster Centroids...");
        cluster_centroids_vec.clear();
        cluster_centroids = new T* [coarse_grained_cluster_num];
        cluster_centroids_flatten = new T[coarse_grained_cluster_num * D];
        for (int i = 0; i < coarse_grained_cluster_num; i++) cluster_centroids[i] = new T[D];
        read_cluster_centroids<T>((dataset_dir + "parameter_0/" + "cluster_centroids_" + std::to_string(coarse_grained_cluster_num)).c_str(), cluster_centroids, coarse_grained_cluster_num, D);
        square_C = new T[coarse_grained_cluster_num];
        std::vector <T> centroid;
        for (int i = 0; i < coarse_grained_cluster_num; i++) {
            T res = 0.0;
            centroid.clear();
            for (int j = 0; j < D; j++) {
                res += cluster_centroids[i][j] * cluster_centroids[i][j];
                cluster_centroids_flatten[i * D + j] = cluster_centroids[i][j];
                centroid.push_back(cluster_centroids[i][j]);
            }
            cluster_centroids_vec.push_back(std::pair<int, std::vector<T>>(i, centroid));
            square_C[i] = res;
        }
        printf("Finished\n");
        printf("Reading Search Point Labels...");
        search_points_labels = new int[N];
        std::vector<std::vector<int>> cluster_points_mapping;
        read_search_points_labels((dataset_dir + "parameter_0/" + "search_points_labels_" + std::to_string(coarse_grained_cluster_num)).c_str(), search_points_labels, N);
        for (int n = 0; n < N; n++) {
            int label = search_points_labels[n];
            points_cluster_mapping[label].push_back(n);
        }
        cluster_size = new int[coarse_grained_cluster_num];
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            std::vector <int> place_holder;
            place_holder.clear();
            cluster_points_mapping.push_back(place_holder);
            int cnt = 0;
            for (int s = 0; s < N; s++) {
                if (search_points_labels[s] == c) {
                    cnt++;
                    cluster_points_mapping[c].push_back(s);
                }
            }
            cluster_size[c] = cnt;
        }
        printf("Finished\n");

        printf("Reading Ground Truth...");
        ground_truth = new int*[Q];
        ground_truth_flatten = new int[Q * 100];
        for (int i = 0; i < Q; i++) ground_truth[i] = new int[100];
        read_ground_truth((dataset_dir + "ground_truth").c_str(), ground_truth, Q);
        for (int q = 0; q < Q; q++) {
            for (int gt = 0; gt < 100; gt++) {
                ground_truth_flatten[q * 100 + gt] = ground_truth[q][gt];
            }
        }
        printf("Finished\n");

        // stat = new T*[D];
        // for (int i = 0; i < D; i++) {
        //     stat[i] = new T[4];    // Min, Max, Mean, Std
        //     std::vector <T> tmp;
        //     tmp.clear();
        //     for (int j = 0; j < N; j++) {
        //         tmp.push_back(search_points[j][i]);
        //     }
        //     stat[i][0] = *std::min_element(tmp.begin(), tmp.end());
        //     stat[i][1] = *std::max_element(tmp.begin(), tmp.end());
        //     stat[i][2] = std::accumulate(tmp.begin(), tmp.end(), 0.0) / (1.0 * N);
        //     stat[i][3] = std::sqrt(std::inner_product(tmp.begin(), tmp.end(), tmp.begin(), 0.0) / (1.0 * N) - stat[i][2] * stat[i][2]);
        // }
        if (use_pq == true) {
            
            printf("Reading Codebook Entry...");
            codebook_entry = new T***[coarse_grained_cluster_num];
            for (int c = 0; c < coarse_grained_cluster_num; c++) {
                codebook_entry[c] = new T**[D / M];
                for (int d = 0; d < D / M; d++) {
                    codebook_entry[c][d] = new T*[PQ_entry];
                    for (int e = 0; e < PQ_entry; e++) {
                        codebook_entry[c][d][e] = new T[PQ_DIM];
                    }
                }
            }

            codebook_labels = new int**[coarse_grained_cluster_num];
            for (int c = 0; c < coarse_grained_cluster_num; c++) {
                codebook_labels[c] = new int*[D / M];
                for (int d = 0; d < D / M; d++) {
                    codebook_labels[c][d] = new int[cluster_size[c]];
                }
            }
            read_codebook_entry_labels(dataset_dir + "parameter_0/" + "codebook_" + std::to_string(coarse_grained_cluster_num), codebook_entry, codebook_labels, cluster_size, coarse_grained_cluster_num, PQ_entry, D);
            printf("Finished\n");
            
            inversed_codebook_map = new std::vector<int>** [coarse_grained_cluster_num];
            // inversed_codebook_map_localid = new std::vector<int>** [coarse_grained_cluster_num];
            int tmp_cnt = 0;
            // omp_set_num_threads(48);
            // #pragma omp parallel for
            for (int _c = 0; _c < coarse_grained_cluster_num; _c++) {
                int c = _c;
            // for (int c = 0; c < coarse_grained_cluster_num; c++) {
                inversed_codebook_map[c] = new std::vector<int>* [D / M];
                // inversed_codebook_map_localid[c] = new std::vector<int>* [D / M];
                for (int d = 0; d < D / M; d++) {
                    inversed_codebook_map[c][d] = new std::vector<int> [PQ_entry];
                    // inversed_codebook_map_localid[c][d] = new std::vector<int> [PQ_entry];
                    for (int e = 0; e < PQ_entry; e++) {
                        inversed_codebook_map[c][d][e].clear();
                        // inversed_codebook_map_localid[c][d][e].clear();
                        for (int n = 0; n < cluster_size[c]; n++) {
                            if (codebook_labels[c][d][n] == e) {
                                inversed_codebook_map[c][d][e].push_back(cluster_points_mapping[c][n]);
                                // inversed_codebook_map_localid[c][d][e].push_back(n);
                            }
                        }
                        // sub_cluster_size[c * (D / M) * PQ_entry + d * PQ_entry + e] = inversed_codebook_map[c][d][e].size();
                    }
                }
                // #pragma omp critical 
                // {
                    tmp_cnt ++;
                    printf("%d\n", tmp_cnt);
                // }
            }
            
        }
        dbg("Finish Reading Dataset and Cluster Info.");
    }

    void setupBVHDict() {
        OPTIX_CHECK(optixInit());
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            bvh_dict[c] = new juno_rt<T>(Q, D);
            bvh_dict[c]->constructBVHforLabelWithRadius(c, search_points, search_points_labels, N, D, stat, radius, metric);
            
        }
    }

    void buildJunoIndex() {
        OPTIX_CHECK(optixInit());
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            bvh_dict[c] = new juno_rt<T>();
            bvh_dict[c]->constructBVHwithPQ(c, codebook_entry, PQ_entry, D, M, stat, radius, metric);
            std::remove("/var/tmp/OptixCache_zhliu/optix7cache.db");
        }
    }

    void buildJunoIndexWhole(float al, float be) {
        OPTIX_CHECK(optixInit());
        std::remove("/var/tmp/OptixCache_zhliu/optix7cache.db");
        bvh_dict[0] = new juno_rt<T>(Q);
        bvh_dict[0]->constructCompleteBVHwithPQ(codebook_entry, coarse_grained_cluster_num, PQ_entry, D, M, stat, radius, metric, al, be);
    }

    void serveQueryWhole(juno_query_batch<T>* _query_batch, int nlists) {
        // omp_set_num_threads(16);
        assert((nlists < NLISTS_MAX) || "Max nlists exceeded.\n");
        // 1st filtering, can be optimized using CUDA/OpenMP
        struct timeval st, ed;
        T** query_data = _query_batch->getQueryData();
        T* query_data_flatten = _query_batch->getFlattenQueryData();
        int query_size = _query_batch->getQuerySize();
        int cluster_bias[coarse_grained_cluster_num] = {-1};
        int cluster_query_size[coarse_grained_cluster_num] = {0};
        // Record which queries fall into the cluster C
        std::vector<std::vector<int>> cluster_query_mapping;
        int *total_candidate = new int[query_size];
        
        // Record which clusters a query falls in
        std::vector<std::vector<std::pair<int, int>>> query_cluster_mapping;
        float **L2mat = new float*[query_size];
        for (int q = 0; q < query_size; q++) L2mat[q] = new float[coarse_grained_cluster_num];
        // Can be optimized with OpenBLAS   
        gettimeofday(&st, NULL);     
        for (int q = 0; q < query_size; q++) {
            // Calculate the L2-dist between every cluster centroids
            // #pragma omp parallel for
            for (int c = 0; c < coarse_grained_cluster_num; c++) {
                L2mat[q][c] = L2Dist(query_data[q], cluster_centroids[c], D);
            }
            std::vector <std::pair<int, int>> query_place_holder;
            query_cluster_mapping.push_back(query_place_holder);
        }

        gettimeofday(&ed, NULL);
        elapsed("Calculate L2 Dist[CPU]", st, ed);
        // Init 


        gettimeofday(&st, NULL);
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            std::vector<int> query_ids;
            query_ids.clear();
            cluster_query_mapping.push_back(query_ids);
        }
        // Can be optimized use OpenMP/CUDA
        // #pragma omp parallel for
        std::map<int, int> used_cluster;
        for (int q = 0; q < query_size; q++) {
            int cnt = 0;
            std::vector <T> query_vec;
            query_vec.clear();
            for (int d = 0; d < D; d++) {
                query_vec.push_back(query_data[q][d]);
            }

            // Sort by L2 distance
            std::sort(cluster_centroids_vec.begin(), cluster_centroids_vec.end(), [q, L2mat](const std::pair<int, std::vector <T>>& a, const std::pair<int, std::vector <T>>& b) {
                return L2mat[q][a.first] < L2mat[q][b.first];
            });

            // Select nlists cluster
            for (int nl = 0; nl < nlists; nl++) {
                // Record a pair, stands for: <the cluster c this query q use, the position this query q falls in the cluster c>
                query_cluster_mapping[q].push_back(std::pair<int, int>(cluster_centroids_vec[nl].first, cluster_query_mapping[cluster_centroids_vec[nl].first].size()));
                // Push query q into the query_list of cluster c
                cluster_query_mapping[cluster_centroids_vec[nl].first].push_back(q);
                cnt += cluster_size[cluster_centroids_vec[nl].first];
                used_cluster[cluster_centroids_vec[nl].first] = 1;
            }
            total_candidate[q] = cnt;
        }
        gettimeofday(&ed, NULL);
        elapsed("Filtering[CPU]", st, ed);
        // for (auto&& item : used_cluster) {
        //     std::cout << item.first << ", ";
        // }
        // std::cout << std::endl;
        // 2nd setting ray origins
        gettimeofday(&st, NULL);
        float3* ray_origin_whole = new float3[Q * (D / M) * nlists];
        int index_bias = 0, accum = 0;
        // Ray Layout: 10000 * nlists * D / 2 rays
        // [............Cluster 1 Ray.............][............Cluster 2 Ray.............]........
        // |                                       \
        // [Dim 00 Ray][Dim 01 Ray]......[Dim 63 Ray]
        // |           \                 |           \
        // [q0,q1,...,qc]                [q0,q1,...,qc]
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            int query_of_cluster_c = cluster_query_mapping[c].size();
            cluster_bias[c] = accum;
            cluster_query_size[c] = cluster_query_mapping[c].size();
            accum += query_of_cluster_c;
            float bias = 1.0 * c;
            for (int d = 0; d < D / M; d++) {
                for (int q = 0; q < query_of_cluster_c; q++) {
                    float x = (1.0 * query_data[cluster_query_mapping[c][q]][2 * d]) / 100.0;
                    float y = (1.0 * query_data[cluster_query_mapping[c][q]][2 * d + 1]) / 100.0;
                    ray_origin_whole[index_bias] = make_float3(x, y, 1.0 * (c * 128 + 2 * d));
                    index_bias++;
                }
            }
        }
        gettimeofday(&ed, NULL);
        elapsed("Setting Ray Origin[CPU]", st, ed);
        // std::sort(ray_origin_whole, ray_origin_whole + index_bias, [](float3 a, float3 b){
        //     if (abs(a.z - b.z) > 1e-3) return a.z < b.z;
        //     else {
        //         if (abs(a.x - b.x) > 1e-3) return a.x < b.x;
        //         else {
        //             if (abs(a.y - b.y) > 1e-3) return a.y < b.y;
        //         }
        //     }
        // });
        gettimeofday(&st, NULL);
        bvh_dict[0]->setRayOrigin(ray_origin_whole, index_bias);
        gettimeofday(&ed, NULL);
        elapsed("Copying Ray Origin H->D[GPU]", st, ed);
        gettimeofday(&st, NULL);
        auto pipeline = bvh_dict[0]->getOptixPipeline();
        auto d_param = bvh_dict[0]->getDparams();
        auto sbt = bvh_dict[0]->getSBT();   
        OPTIX_CHECK(optixLaunch(pipeline, stream, d_param, sizeof(Params), sbt, index_bias, 1, 1));
        CUDA_SYNC_CHECK();
        gettimeofday(&ed, NULL);
        elapsed("Ray Tracing", st, ed);
        float us = 1000000.0 * (ed.tv_sec - st.tv_sec) + 1.0 * (ed.tv_usec - st.tv_usec);

        
        gettimeofday(&st, NULL);
        bvh_dict[0]->getRayHitRecord(hit_record, index_bias);
        int r1_100 = 0;
        int r100_1000 = 0;
        #pragma omp parallel for
        for (int q = 0; q < query_size; q++) {
            std::vector <std::pair<int, int>> sort_res;
            sort_res.clear();
            for (int nl = 0; nl < nlists; nl++) {
                int tmp_cluster = query_cluster_mapping[q][nl].first;
                int query_in_cluster_id = query_cluster_mapping[q][nl].second;
#if VERBOSE == 1
                printf("Query: %d, Cluster: %d, Bias: %d\n", q, tmp_cluster, query_in_cluster_id);
#endif
                int base_addr = cluster_bias[tmp_cluster] * (D / M) * (MAX_ENTRY / 32);
                int stride = cluster_query_mapping[tmp_cluster].size() * (MAX_ENTRY / 32);
                std::unordered_map <int, int> point_counter_mapping;
                unsigned long long one = 1, zero = 0;
                for (int bit_id = 0; bit_id < (MAX_ENTRY / 32); bit_id++) {
                    if (bit_id >= (CURRENT_ENTRY / 32)) break;
                    for (int d = 0; d < D / M; d++) {
                        unsigned long long hit_res = hit_record[base_addr + query_in_cluster_id * (MAX_ENTRY / 32) + bit_id + d * stride];
                        for (unsigned int bit = 0; bit < 32; bit++) {
                            int cnt = 0 ;
                            if ((hit_res & (one << (bit * 2))) != zero) cnt ++ ;
                            if ((hit_res & (one << (bit * 2 + 1))) != zero) cnt ++ ;
                            if (cnt != 0) {
                                for (auto && item : inversed_codebook_map[tmp_cluster][d][bit]) {
                                    point_counter_mapping[item] += cnt ;
                                }
                            }
                            // if ((hit_res & (one << (bit * 2))) != zero) {
                            //     // int cnt = 0;
                            //     for (auto && item : inversed_codebook_map[tmp_cluster][d][bit]) {
                            //         point_counter_mapping[item] ++;
                            //         // cnt ++;
                            //     }
                            // // std::cout << cnt << "/" << total_candidate[q] << std::endl;
                            // }
                            // if ((hit_res & (one << (bit * 2 + 1))) != zero) {
                            //     for (auto && item : inversed_codebook_map[tmp_cluster][d][bit]) {
                            //         point_counter_mapping[item] ++;
                            //     }
                            // }
                        }
#if VERBOSE == 1
                        if (bit_id == 0) printf("%08x%c", hit_res, (d % 16 == 15) ? ' ' : ' ');
#endif
                    }
#if VERBOSE == 1
                    if (bit_id == 0) printf("\n");
#endif
                    for (auto it = point_counter_mapping.begin(); it != point_counter_mapping.end(); it++) {
                        sort_res.push_back(std::pair<int, int>(it->first, it->second));
                    }
                }
            }
            sort(sort_res.begin(), sort_res.end(), [](const std::pair<int, int> a, const std::pair<int, int> b) {return a.second > b.second;});
            // std::cout << sort_res.size() << std::endl;
            // for (auto&& item : sort_res) {
            //     std::cout << item.first << " " << item.second << std::endl;
            // }
            int local_r1_100 = 0;
            for (int topk = 0; topk < 100; topk++) {
                // std::cout << "(" << sort_res[topk].first << ", " << sort_res[topk].second << "), " << std::endl;
                if (sort_res[topk].first == ground_truth[q][0]) {
                    local_r1_100++;
                    break;
                }
            }
            #pragma omp critical 
            {
                r1_100 += local_r1_100;
            }
            int local_r100_1000 = 0;
            for (int gt = 0; gt < 100; gt++) {
                for (int topk = 0; topk < 1000; topk++) {
                    if (sort_res[topk].first == ground_truth[q][gt]) {
                        local_r100_1000 ++;
                        break;
                    }
                }
            }
            #pragma omp critical 
            {
                r100_1000 += local_r100_1000;
            }
        }
        
        std::cout << r1_100 << " " << (1.0 * r100_1000) / (1.0 * query_size) << std::endl;
        gettimeofday(&ed, NULL);
        elapsed("Computing Hit Result", st, ed);
        std::ofstream fres("result", std::fstream::out | std::fstream::app);
        fres << (query_size * 1000.0) / (us / 1000.0) << ", " << (1.0 * r1_100) / (1.0 * query_size) << ", " << (1.0 * r100_1000) / (1.0 * query_size) << "\n";
        fres.close();
        bvh_dict[0]->freeResources();
    }

    void serveQuery(juno_query_batch<T>* _query_batch, int nlists) {
        // juno_rt<T>.initRayOriginArray(Q, D, M, nlists);
        struct timeval st, ed;
        gettimeofday(&st, NULL);
        T** query_data = _query_batch->getQueryData();
        T* query_data_flatten = _query_batch->getFlattenQueryData();
        int query_size = _query_batch->getQuerySize();
        std::vector<std::vector<int>> cluster_query_mapping;
        float **L2mat = new float*[query_size];
        // Can be optimized with OpenBLAS
        for (int q = 0; q < query_size; q++) {
            L2mat[q] = new float[coarse_grained_cluster_num];
            for (int c = 0; c < coarse_grained_cluster_num; c++) {
                L2mat[q][c] = L2Dist(query_data[q], cluster_centroids[c], D);
            }
        }
        std::cout << "L2 calc complete" << std::endl;
        for (int c = 0; c < coarse_grained_cluster_num; c++) {
            std::vector<int> query_ids;
            query_ids.clear();
            cluster_query_mapping.push_back(query_ids);
        }
        // Can be optimized use OpenMP/CUDA
        for (int q = 0; q < query_size; q++) {
            std::vector <T> query_vec;
            query_vec.clear();
            for (int d = 0; d < D; d++) {
                query_vec.push_back(query_data[q][d]);
            }
            std::sort(cluster_centroids_vec.begin(), cluster_centroids_vec.end(), [q, L2mat](const std::pair<int, std::vector <T>>& a, const std::pair<int, std::vector <T>>& b) {
                return L2mat[q][a.first] < L2mat[q][b.first];
            });
            for (int nl = 0; nl < nlists; nl++) {
                cluster_query_mapping[cluster_centroids_vec[nl].first].push_back(q);
            }
        }
        gettimeofday(&ed, NULL);
        elapsed("Filtering", st, ed);
        gettimeofday(&st, NULL);
        int res = 0;
        for (int c = 0; c < 1; c++) {
            int query_of_cluster_c = cluster_query_mapping[c].size();
            float3* ray_origin = new float3[query_of_cluster_c * D / M];
            for (int d = 0; d < D / M; d++) {
                for (int q = 0; q < query_of_cluster_c; q++) {
                    float x = 1.0 * query_data[cluster_query_mapping[c][q]][2 * d];
                    float y = 1.0 * query_data[cluster_query_mapping[c][q]][2 * d + 1];
                    ray_origin[d * query_of_cluster_c + q] = make_float3(x, y, 1.0 * 2 * d);
                } 
            }
            bvh_dict[c]->setRayOrigin(ray_origin, query_of_cluster_c * D / M);
            delete [] ray_origin;
            auto pipeline = bvh_dict[c]->getOptixPipeline();
            auto d_param = bvh_dict[c]->getDparams();
            auto sbt = bvh_dict[c]->getSBT();      
            // query_of_cluster_c * D / M
            OPTIX_CHECK(optixLaunch(pipeline, stream, d_param, sizeof(Params), sbt, query_of_cluster_c * D / M, 1, 1));
            CUDA_SYNC_CHECK();
        }
        gettimeofday(&ed, NULL);
        elapsed("Ray Tracing", st, ed);
        
    }

    // Legacy
    void serveQueryBatch(juno_query_batch<T>* _query_batch) {
        // square_Q[0 : Batch - 1], square_C[0 : cluster_num - 1]
        // square_Q[i] = sum([x^2 for x in     query[i]])   [ Online]
        // square_C[i] = sum([x^2 for x in centroids[i]])   [Offline]
        // QC = matmul(Queries (Batch * Dim), Centroids^T (Dim * cluster_num)) [ Online] [cuBLAS]
        // Dist[i][j] = sqrt(square_Q[i] + square_C[j] - 2 * QC[i][j])
        unsigned int* h_hit;
        struct timeval st, ed;
        gettimeofday(&st, NULL);
        T** tmp = _query_batch->getQueryData();
        T* tmp_flatten = _query_batch->getFlattenQueryData();
        int query_size = _query_batch->getQuerySize();
        square_Q = new T[query_size];
        T** QC;
        T* QC_flatten;
        QC = new T*[query_size];
        int *selected_centroids = new int[query_size];
        QC_flatten = new T[query_size * coarse_grained_cluster_num];
        for (int i = 0; i < query_size; i++) QC[i] = new T[coarse_grained_cluster_num];
        for (int q = 0; q < query_size; q++) {
            T res = 0.0;
            for (int d = 0; d < D; d++) {
                res += tmp[q][d] * tmp[q][d];
            }
            square_Q[q] = res;
        }
        
        // for (int i = 0; i < query_size; i++) {
        //     for (int j = 0; j < coarse_grained_cluster_num; j++) {
        //         QC[i][j] = 0.0f;
        //         for (int k = 0; k < D; k++) {
        //             QC[i][j] += tmp[i][k] * cluster_centroids[j][k];
        //         }
        //     }
        // }
#if COARSE_GRAIN_CLUSTER_USE_GPU == 1
        // Don't
        // Disaster
#else
        
        if (typeid(T) == typeid(float)) {
            // export OPENBLAS_NUM_THREADS=16, ~0.35ms
            // cblas_sgemm(CblasRowMajor, 
            //             CblasNoTrans, 
            //             CblasTrans,
            //             query_size,
            //             coarse_grained_cluster_num,
            //             D,
            //             1.0f,
            //             tmp_flatten, 
            //             D, 
            //             cluster_centroids_flatten,
            //             D, 
            //             0.0f,
            //             QC_flatten, 
            //             coarse_grained_cluster_num);
        }
        else if (typeid(T) == typeid(double)) {
            // cblas_dgemm(CblasRowMajor, 
            //             CblasNoTrans, 
            //             CblasTrans,
            //             query_size,
            //             coarse_grained_cluster_num,
            //             D,
            //             1.0f,
            //             tmp_flatten, 
            //             D, 
            //             cluster_centroids_flatten,
            //             D, 
            //             0.0f,
            //             QC_flatten, 
            //             coarse_grained_cluster_num);
        }
#endif
        for (int i = 0; i < query_size; i++) {
            int min = 1e10, id = -1;
            for (int j = 0; j < coarse_grained_cluster_num; j++) {
                QC[i][j] = sqrt(square_C[j] + square_Q[i] - 2 * QC_flatten[i * coarse_grained_cluster_num + j]);
                if (QC[i][j] < min) {
                    min = QC[i][j];
                    id = j;
                }
            }
            selected_centroids[i] = id;
        }
        gettimeofday(&ed, NULL);
        // elapsed("Coarse Grained Clustering", st, ed);

        float3* ray_origins = new float3[query_size * D / 2];
        for (int q = 0; q < query_size; q++) {
            for (int d = 0; d < D; d+=2) {
                float x = 1.0 * tmp[q][d], y = 1.0 * tmp[q][d + 1];
                ray_origins[q * (D >> 1) + (d >> 1)] = make_float3(x, y, 1.0 * (d >> 1) + 0.5);
            }
        }
        std::cout << selected_centroids[0] << std::endl;
        for (int i = 0; i < query_size; i++) {
            bvh_dict[selected_centroids[i]]->setRayOrigin(ray_origins + i * D / M, D / M);
        }
        std::cout << "Ray Set" << std::endl;
        gettimeofday(&st, NULL);
        for (int i = 0; i < 1; i++) {
            auto pipeline = bvh_dict[selected_centroids[i]]->getOptixPipeline();
            auto d_param = bvh_dict[selected_centroids[i]]->getDparams();
            auto sbt = bvh_dict[selected_centroids[i]]->getSBT();
            OPTIX_CHECK(optixLaunch(pipeline, stream, d_param, sizeof(Params), sbt, 64, 1, 1));
            
            CUDA_SYNC_CHECK();
            // @TODO: 1. can't get correct hit report with correct primitive number
            //        2. Though we can, the time will be 2ms for query=100, QPS is 50000, bad.
            // break;
            // CUDA_SYNC_CHECK();
            // auto device_hit = bvh_dict[selected_centroids[i]]->getPrimitiveHit();
            // int hn = bvh_dict[selected_centroids[i]]->getHitableNum();
            // CUDA_CHECK(cudaMallocHost(reinterpret_cast<void**>(&h_hit), sizeof(unsigned int) * hn));
            // CUDA_CHECK(cudaMemcpy(h_hit, reinterpret_cast<void*>(device_hit), sizeof(unsigned int) * hn, cudaMemcpyDeviceToHost));
            // std::vector <std::pair<int, int>> candidate;
            // for (int x = 0; x < hn / 64; x++) {
            //     for (int y = 0; y < 64; y++) {
            //         std::cout << h_hit[y * (hn / 64) + x] << std::endl;
            //     }
            // }
            // int g_cnt = 0;
            // for (int x = 0; x < 64; x++) {
            //     int cnt = 0;
            //     for (int y = 0; y < hn / 64; y++) {
            //         std::cout << h_hit[x * (hn / 64) + y] << std::endl;
            //     }
            //     candidate.push_back(std::pair<int, int>(points_cluster_mapping[19][x], cnt));
            // }
            // for (auto && c : candidate) {
            //     std::cout << c.first << " " << c.second << std::endl;
            // }
            // std::sort(candidate.begin(), candidate.end(), [](std::pair<int, int> a, std::pair<int, int> b) {return a.second > b.second;});
            // int recall = 0;
            // for (int top = 0; top < 100; top++) {
            //     for (int c = 0; c < 1000; c++) {
            //         if (candidate[c].first == ground_truth[0][top]) {
            //             recall++;
            //         }
            //     }
            // }

        }
        // dbg(query_size);
        gettimeofday(&ed, NULL);
        elapsed("Ray Tracing Intersection Test", st, ed);

    }

    void plotDataset(juno_query_total<T>* query_total) {
        // plotQueryWithDensity(search_points_flatten, query_total->getQueryDataFlatten(), cluster_centroids_flatten, search_points_labels, query_total->getaGroundTruthFlatten() , N, query_total->getQueryAmount(), D, coarse_grained_cluster_num);
        referenceModel(search_points_flatten, query_total->getQueryDataFlatten(), cluster_centroids_flatten, search_points_labels, query_total->getaGroundTruthFlatten() , N, query_total->getQueryAmount(), D, coarse_grained_cluster_num, stat);
    }
}; // class juno_core

}; // namespace juno

#endif
